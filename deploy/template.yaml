AWSTemplateFormatVersion: "2010-09-09"

Transform:
  - AWS::Serverless-2016-10-31
Description: >-
  This creates the necessary components to deploy Passport Front onto ECS
  Fargate within an existing VPC and private subnets (provided as parameters).
  Passport Front can be invoked via the public API Gateway on the url in the
  PassportFrontUrl output.

  The ingress route in summary is: API Gateway -> VPC link -> private ALB ->
  Passport Front ECS Service

  Passport Front egress to Passport Back's API Gateway is via a NAT Gateway, not created
  here, which should have a route in the provided private subnets' route table.

Parameters:
  Environment:
    Description: The name of the environment to deploy to.
    Type: String
    AllowedPattern: ((production)|(integration)|(staging)|(build)|(dev))
  VpcStackName:
    Description: >
      The name of the stack that defines the VPC in which this container will
      run.
    Type: String
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"
  ApiStackName:
    Type: String
    Default: "ipv-cri-passport-api"

Conditions:
  IsNotDevelopment: !Or
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, staging]
    - !Equals [!Ref Environment, integration]
    - !Equals [!Ref Environment, production]
  IsProduction: !Equals [!Ref Environment, production]
  IsPerformance: !Or
    - !Equals [!Ref Environment, build]
    - !Equals [!Ref Environment, production]
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Mappings:

  # Auto Scaling Min Containers
  MinContainerCount:
    Environment:
      dev: 1
      build: 2
      staging: 2
      integration: 2
      production: 2

  # Auto Scaling Max Containers
  MaxContainerCount:
    Environment:
      dev: 1
      build: 5
      staging: 5
      integration: 5
      production: 5

  # see https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  ElasticLoadBalancerAccountIds:
    eu-west-2:
      AccountId: 652711504416

  LogLevel:
    Environment:
      dev: "debug"
      build: "debug"
      staging: "request"
      integration: "request"
      production: "request"

  ga4Enabled:
    Environment:
      dev: "true"
      build: "false"
      staging: "false"
      integration: "false"
      production: "false"

Resources:
  # Security Groups for the ECS service and load balancer
  LoadBalancerSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Passport Front LoadBalancer Security Group
      # checkov:skip=CKV_AWS_260: Security group rules to be reviewed in JIRA PYIC-1464
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  LoadBalancerSGEgressToECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroupEgress"
    Properties:
      GroupId: !GetAtt LoadBalancerSG.GroupId
      IpProtocol: tcp
      Description: >-
        Egress between the Passport Front load balancer and
        the passport front ECS security group
      DestinationSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      FromPort: 8080
      ToPort: 8080

  ECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Passport Front ECS Security Group outbound permissions ruleset
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId

  ECSSecurityGroupIngressFromLoadBalancer:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      IpProtocol: tcp
      Description: >-
        Passport Front ECS permits inbound from the Passport Front
        load balancer.
      FromPort: 8080
      ToPort: 8080
      GroupId: !GetAtt ECSSecurityGroup.GroupId
      SourceSecurityGroupId: !GetAtt LoadBalancerSG.GroupId

  AccessLogsBucket:
    Condition: IsNotDevelopment
    Type:
      AWS::S3::Bucket
      #checkov:skip=CKV_AWS_18: This is the bucket where our access logs go and AWS advise not sending a bucket's access logs to itself.
    Properties:
      BucketName: !Join
        - "-"
        - - !Ref AWS::StackName
          - "accesslogsbucket"
          - Fn::Select:
              - 4
              - Fn::Split:
                  - '-'
                  - Fn::Select:
                      - 2
                      - Fn::Split:
                          - /
                          - Ref: AWS::StackId
      AccessControl: LogDeliveryWrite
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  PassportFrontAccessLogsBucketPolicy:
    Condition: IsNotDevelopment
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowLoadBalancerToLogToS3
            Effect: Allow
            Principal:
              AWS: !Sub
                - "arn:aws:iam::${ElbAccountId}:root"
                - ElbAccountId: !FindInMap [ ElasticLoadBalancerAccountIds, !Ref AWS::Region, AccountId ]
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
          - Sid: AllowAwsLogDeliveryToLogToS3
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:PutObject
            Resource: !Sub "${AccessLogsBucket.Arn}/AWSLogs/${AWS::AccountId}/*"
            Condition:
              StringEquals:
                "s3:x-amz-acl": bucket-owner-full-control
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: AllowAwsLogDeliveryToReadBucketAcl
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action:
              - s3:GetBucketAcl
            Resource: !GetAtt AccessLogsBucket.Arn
            Condition:
              StringEquals:
                "aws:SourceAccount": !Ref AWS::AccountId
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Action:
              - "s3:*"
            Resource:
              - !Sub "${AccessLogsBucket.Arn}/*"
            Principal: "*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"

  # Private Application Load Balancer
  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    #checkov:skip=CKV_AWS_91:ALB access logging is disabled in developer environments to make them easier to manage.
    Properties:
      Scheme: internal
      SecurityGroups:
        - !GetAtt LoadBalancerSG.GroupId
      Subnets:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      Type: application
      LoadBalancerAttributes: !If
        - IsNotDevelopment
        - - Key: access_logs.s3.enabled
            Value: true
          - Key: access_logs.s3.bucket
            Value: !Ref AccessLogsBucket
        - !Ref AWS::NoValue

  LoadBalancerListenerTargetGroupECS:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckEnabled: TRUE
      HealthCheckProtocol: HTTP
      HealthCheckPath: /healthcheck
      Matcher:
        HttpCode: 200
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  LoadBalancerListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    # checkov:skip=CKV_AWS_2:Certificate generation must be resolved before the listener can use HTTPS.
    # checkov:skip=CKV_AWS_103:The load balancer cannot use TLS v1.2 until HTTPS is enabled
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  #
  #  ElastiCache (for session caching)
  #

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: SubnetGroup for ElastiCache
      SubnetIds:
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdA"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdB"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnetIdC"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SubnetGroup"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Passport CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  ElastiCacheParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties:
      CacheParameterGroupFamily: redis3.2
      Properties:
        cluster-enabled: "yes"
      Description: Cache parameter group
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-CacheParameterGroup"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Passport CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  ElastiCacheSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Passport Front Redis Security Group
      SecurityGroupIngress:
        - Description: Allow inbound on port 6379
          SourceSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
          FromPort: 6379
          IpProtocol: tcp
          ToPort: 6379
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcId"

  ElastiCacheReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      AutomaticFailoverEnabled: true
      CacheNodeType: cache.t2.micro
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      CacheParameterGroupName: !Ref ElastiCacheParameterGroup
      Engine: redis
      EngineVersion: 3.2.10
      MultiAZEnabled: true
      NumNodeGroups: 1
      ReplicasPerNodeGroup: 1
      ReplicationGroupDescription: Replication group for Elastiache
      SecurityGroupIds:
        - !Ref ElastiCacheSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ElastiCacheReplicationGroup"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Passport CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  # ECS cluster, service and task definition
  PassportFrontEcsCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECSCluster"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Passport CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  PassportFrontEcsService:
    Type: "AWS::ECS::Service"
    Properties:
      Cluster: !Ref PassportFrontEcsCluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
        DeploymentCircuitBreaker:
          Enable: TRUE
          Rollback: TRUE
      DeploymentController:
        Type: ECS
      DesiredCount: !FindInMap [MinContainerCount, Environment, !Ref 'Environment']
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: app
          ContainerPort: 8080
          TargetGroupArn: !Ref LoadBalancerListenerTargetGroupECS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !GetAtt ECSSecurityGroup.GroupId
          Subnets:
            - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdA
            - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdB
            - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnetIdC
      TaskDefinition: !Ref ECSServiceTaskDefinition
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ECS"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Passport CRI"
        - Key: Environment
          Value: !Sub "${Environment}"
    DependsOn:
      - LoadBalancerListener

  ECSAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ecs/${AWS::StackName}-PassportFront-ECS
      RetentionInDays: 14
      KmsKeyId: !GetAtt LoggingKmsKey.Arn

  ECSAccessLogsGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref ECSAccessLogsGroup

  ECSServiceTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: CONTAINER-IMAGE-PLACEHOLDER
          Name: app
          Environment:
            - Name: API_BASE_URL
              Value:
                Fn::ImportValue: !Sub ${ApiStackName}-PrivateUKPassportApiBaseUrl
            - Name: EXTERNAL_WEBSITE_HOST
              Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
            - Name: SESSION_TABLE_NAME
              Value: !Sub
                - "cri-passport-front-sessions-${Environment}"
                - Environment: !Ref Environment
            - Name: UA_CONTAINER_ID
              Value: !If [IsProduction, "GTM-TT5HDKV", "GTM-TK92W68"]
            - Name: GA4_CONTAINER_ID
              Value: !If [ IsProduction, "GTM-K4PBJH3", "GTM-KD86CMZ" ]
            - Name: GA4_ENABLED
              Value: !FindInMap [ ga4Enabled, Environment, !Ref 'Environment' ]
            - Name: ANALYTICS_DOMAIN
              Value:
                !If [
                  IsProduction,
                  "account.gov.uk",
                  !Sub "${Environment}.account.gov.uk",
                ]
            - Name: LOG_LEVEL
              Value: !FindInMap [ LogLevel, Environment, !Ref 'Environment' ]
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSAccessLogsGroup
              awslogs-region: !Sub ${AWS::Region}
              awslogs-stream-prefix: !Sub passport-front-${Environment}
      Cpu: "512"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      Memory: "1024"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-TaskDefinition"
        - Key: Product
          Value: "GOV.UK sign in"
        - Key: System
          Value: "Passport CRI"
        - Key: Environment
          Value: !Sub "${Environment}"

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PullPassportFrontImage
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetAuthorizationToken"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - !GetAtt "ECSAccessLogsGroup.Arn"
                  - !Sub "${ECSAccessLogsGroup.Arn}:*"
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyName: PassportFrontDynamoDBSessionAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:PutItem"
                Resource:
                  - !GetAtt PassportFrontSessionsTable.Arn
      PermissionsBoundary: !If
        - UsePermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue

  ApiGwHttpEndpoint:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Sub ipv-passport-front-${Environment}
      ProtocolType: HTTP

  ApiGwHttpEndpointIntegration:
    Type: "AWS::ApiGatewayV2::Integration"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      IntegrationType: HTTP_PROXY
      ConnectionId:
        Fn::ImportValue: !Sub "${VpcStackName}-VpcLinkId"
      ConnectionType: VPC_LINK
      IntegrationMethod: ANY
      IntegrationUri: !Ref LoadBalancerListener
      PayloadFormatVersion: "1.0"

  APIGWRoute:
    Type: "AWS::ApiGatewayV2::Route"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      RouteKey: "ANY /{proxy+}"
      Target: !Join
        - /
        - - integrations
          - !Ref ApiGwHttpEndpointIntegration

  APIStageDefault:
    Type: "AWS::ApiGatewayV2::Stage"
    Properties:
      ApiId: !Ref ApiGwHttpEndpoint
      StageName: $default
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt APIGWAccessLogsGroup.Arn
        Format: >-
          {
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "path": "$context.path",
          "routeKey":"$context.routeKey",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength",
          "responseLatency":"$context.responseLatency"
          }

  APIGWAccessLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-PassportFront-API-GW-AccessLogs
      KmsKeyId: !GetAtt LoggingKmsKey.Arn
      RetentionInDays: 14

  APIGWAccessLogsGroupSubscriptionFilterCSLS:
    Type: AWS::Logs::SubscriptionFilter
    Condition: IsNotDevelopment
    Properties:
      DestinationArn: "arn:aws:logs:eu-west-2:885513274347:destination:csls_cw_logs_destination_prodpython"
      FilterPattern: ""
      LogGroupName: !Ref APIGWAccessLogsGroup

  LoggingKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt*"
              - "kms:Decrypt*"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:Describe*"
            Resource: "*"
            Condition:
              ArnLike:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"

  ECSAutoScalingTarget:
    Condition: IsPerformance
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !FindInMap [MaxContainerCount, Environment, !Ref 'Environment']
      MinCapacity: !FindInMap [MinContainerCount, Environment, !Ref 'Environment']
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref PassportFrontEcsCluster
          - !GetAtt PassportFrontEcsService.Name
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSAutoScalingPolicy:
    Condition: IsPerformance
    DependsOn: ECSAutoScalingTarget
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ECSAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ResourceId: !Join
        - '/'
        - - "service"
          - !Ref PassportFrontEcsCluster
          - !GetAtt PassportFrontEcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 70.0

  PassportFrontSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      # checkov:skip=CKV_AWS_28: Point in time recovery is not necessary for this table.
      TableName: !Sub "cri-passport-front-sessions-${Environment}"
      BillingMode: "PAY_PER_REQUEST"
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expires"
        Enabled: true
      SSESpecification:
        # checkov:skip=CKV_AWS_119: Implement Customer Managed Keys in PYIC-1391
        SSEEnabled: true
        SSEType: KMS

####################################################################
#                                                                  #
# Alerts                                                           #
#                                                                  #
####################################################################

  PassportNoTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Passport ${Environment} frontend no ECS service tasks
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlarmTopicPassport
      OKActions:
        - !Ref AlarmTopicPassport
      InsufficientDataActions: []
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref PassportFrontEcsCluster
      Period: 60
      EvaluationPeriods: 2
      DatapointsToAlarm: 2
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  PassportOnlyOneTaskCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Passport ${Environment} frontend below desired ECS service tasks
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlarmTopicPassport
      OKActions:
        - !Ref AlarmTopicPassport
      InsufficientDataActions: []
      MetricName: TaskCount
      Namespace: ECS/ContainerInsights
      Statistic: Average
      Dimensions:
        - Name: ClusterName
          Value: !Ref PassportFrontEcsCluster
      Period: 300
      EvaluationPeriods: 3
      DatapointsToAlarm: 3
      Threshold: 2
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching

  Passport5XXOnELB:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub Passport ${Environment} frontend 5XX count
      ActionsEnabled: true
      AlarmActions:
        - !Ref AlarmTopicPassport
      OKActions:
        - !Ref AlarmTopicPassport
      InsufficientDataActions: []
      MetricName: HTTPCode_Target_5XX_Count
      Namespace: AWS/ApplicationELB
      Statistic: Sum
      Dimensions:
        - Name: TargetGroup
          Value: !Ref LoadBalancerListenerTargetGroupECS
        - Name: LoadBalancer
          Value: !Ref LoadBalancer
      Period: 60
      EvaluationPeriods: 5
      DatapointsToAlarm: 5
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  ####################################################################
  #                                                                  #
  # Alarm setup                                                      #
  #                                                                  #
  ####################################################################

  AlarmTopicPassport:
    Type: AWS::SNS::Topic
    # checkov:skip=CKV_AWS_26: We will update this once basic alerting is available
    Metadata:
      SamResourceId: AlarmTopicPassport
  AlarmTopicSubscriptionPagerDutyPassport:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn:
        Ref: AlarmTopicPassport
      Endpoint:
        Fn::Sub: '{{resolve:ssm:/alerting/pagerduty-passport/url}}'
      Protocol: https
    Metadata:
      SamResourceId: AlarmTopicSubscriptionPagerDutyPassport
  AlarmPublishToTopicPolicyPassport:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - Ref: AlarmTopicPassport
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource:
              Ref: AlarmTopicPassport
            Principal:
              Service: cloudwatch.amazonaws.com
            Condition:
              ArnLike:
                AWS:SourceArn:
                  Fn::Sub: arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:*
    Metadata:
      SamResourceId: AlarmPublishToTopicPolicyPassport

Outputs:
  PassportFrontUrl:
    Description: >-
      The API Gateway URL which Passport Front can be invoked on.
    Value: !GetAtt ApiGwHttpEndpoint.ApiEndpoint
  PassportFrontGatewayID:
    Description: Passport Front API Gateway ID
    Export:
      Name: !Sub "${AWS::StackName}-PassportFrontGatewayId"
    Value: !Ref ApiGwHttpEndpoint
